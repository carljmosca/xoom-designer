package io.vlingo.xoomapp.infrastructure.persistence;

import io.vlingo.xoom.actors.World;
import io.vlingo.xoom.actors.testkit.AccessSafely;
import io.vlingo.xoom.common.serialization.JsonSerialization;
import io.vlingo.xoom.lattice.model.projection.Projectable;
import io.vlingo.xoom.lattice.model.projection.Projection;
import io.vlingo.xoom.lattice.model.projection.TextProjectable;
import io.vlingo.xoom.lattice.model.stateful.StatefulTypeRegistry;
import io.vlingo.xoom.symbio.BaseEntry;
import io.vlingo.xoom.symbio.Metadata;
import io.vlingo.xoom.symbio.store.dispatch.NoOpDispatcher;
import io.vlingo.xoom.symbio.store.state.StateStore;
import io.vlingo.xoom.symbio.store.state.inmemory.InMemoryStateStoreActor;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Collections;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

import java.time.LocalDate;
import io.vlingo.xoomapp.infrastructure.*;
import java.util.*;
import io.vlingo.xoomapp.model.author.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

public class AuthorProjectionTest {

  private World world;
  private StateStore stateStore;
  private Projection projection;
  private Map<String, String> valueToProjectionId;

  @BeforeEach
  public void setUp() {
    world = World.startWithDefaults("test-state-store-projection");
    NoOpDispatcher dispatcher = new NoOpDispatcher();
    valueToProjectionId = new ConcurrentHashMap<>();
    stateStore = world.actorFor(StateStore.class, InMemoryStateStoreActor.class, Collections.singletonList(dispatcher));
    StatefulTypeRegistry statefulTypeRegistry = StatefulTypeRegistry.registerAll(world, stateStore, AuthorData.class);
    QueryModelStateStoreProvider.using(world.stage(), statefulTypeRegistry);
    projection = world.actorFor(Projection.class, AuthorProjectionActor.class, stateStore);
  }

  private void registerExampleAuthor(AuthorState firstData, AuthorState secondData) {
    final CountingProjectionControl control = new CountingProjectionControl();
    final AccessSafely access = control.afterCompleting(2);
    projection.projectWith(createAuthorRegistered(firstData), control);
    projection.projectWith(createAuthorRegistered(secondData), control);
  }


  private Projectable createAuthorRegistered(AuthorState data) {
    final AuthorRegistered eventData = new AuthorRegistered(data.id, data.name, data.availableOn);

    BaseEntry.TextEntry textEntry = new BaseEntry.TextEntry(AuthorRegistered.class, 1,
    JsonSerialization.serialized(eventData), 1, Metadata.withObject(eventData));
    final String projectionId = UUID.randomUUID().toString();
    valueToProjectionId.put(data.id, projectionId);
    return new TextProjectable(null, Collections.singletonList(textEntry), projectionId);
  }

    @Test
    public void withName() {
      final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
      final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
      final CountingProjectionControl control = new CountingProjectionControl();
      final AccessSafely access = control.afterCompleting(2);
      projection.projectWith(createAuthorRegistered(firstData.toAuthorState()), control);
      projection.projectWith(createAuthorRegistered(secondData.toAuthorState()), control);
      final Map<String, Integer> confirmations = access.readFrom("confirmations");

      assertEquals(2, confirmations.size());
      assertEquals(1, valueOfProjectionIdFor(firstData.id, confirmations));
      assertEquals(1, valueOfProjectionIdFor(secondData.id, confirmations));

      CountingReadResultInterest interest = new CountingReadResultInterest();
      AccessSafely interestAccess = interest.afterCompleting(1);
      stateStore.read(firstData.id, AuthorData.class, interest);
      AuthorData item = interestAccess.readFrom("item", firstData.id);
          assertEquals(item.id, "1");
          assertEquals(item.name.firstName, "first-author-name-firstName");
          assertEquals(item.name.lastName, "first-author-name-lastName");

        interest = new CountingReadResultInterest();
        interestAccess = interest.afterCompleting(1);
        stateStore.read(secondData.id, AuthorData.class, interest);
        item = interestAccess.readFrom("item", secondData.id);
        assertEquals(secondData.id, item.id);
          assertEquals(item.id, "2");
          assertEquals(item.name.firstName, "second-author-name-firstName");
          assertEquals(item.name.lastName, "second-author-name-lastName");
    }


  private Projectable createAuthorRanked(AuthorState data) {
    final AuthorRanked eventData = new AuthorRanked(data.id, data.rank);
    BaseEntry.TextEntry textEntry = new BaseEntry.TextEntry(AuthorRanked.class, 1,
    JsonSerialization.serialized(eventData), 2, Metadata.withObject(eventData));
    final String projectionId = UUID.randomUUID().toString();
    valueToProjectionId.put(data.id, projectionId);
    return new TextProjectable(null, Collections.singletonList(textEntry), projectionId);
  }

    @Test
    public void changeRank() {
        final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
        final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
      registerExampleAuthor(firstData.toAuthorState(), secondData.toAuthorState());

      final CountingProjectionControl control = new CountingProjectionControl();
      final AccessSafely access = control.afterCompleting(1);
      projection.projectWith(createAuthorRanked(firstData.toAuthorState()), control);
      final Map<String, Integer> confirmations = access.readFrom("confirmations");

      assertEquals(1, confirmations.size());
      assertEquals(1, valueOfProjectionIdFor(firstData.id, confirmations));

      CountingReadResultInterest interest = new CountingReadResultInterest();
      AccessSafely interestAccess = interest.afterCompleting(1);
      stateStore.read(firstData.id, AuthorData.class, interest);
      AuthorData item = interestAccess.readFrom("item", firstData.id);
      assertEquals(item.id, "1");
      assertNotNull(item.rank);
    }


  private Projectable createAuthorRelated(AuthorState data) {
    final AuthorRelated eventData = new AuthorRelated(data.id, data.tags);
    BaseEntry.TextEntry textEntry = new BaseEntry.TextEntry(AuthorRelated.class, 1,
    JsonSerialization.serialized(eventData), 2, Metadata.withObject(eventData));
    final String projectionId = UUID.randomUUID().toString();
    valueToProjectionId.put(data.id, projectionId);
    return new TextProjectable(null, Collections.singletonList(textEntry), projectionId);
  }

    @Test
    public void addTag() {
        final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
        final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
      registerExampleAuthor(firstData.toAuthorState(), secondData.toAuthorState());

      final CountingProjectionControl control = new CountingProjectionControl();
      final AccessSafely access = control.afterCompleting(1);
      projection.projectWith(createAuthorRelated(firstData.toAuthorState()), control);
      final Map<String, Integer> confirmations = access.readFrom("confirmations");

      assertEquals(1, confirmations.size());
      assertEquals(1, valueOfProjectionIdFor(firstData.id, confirmations));

      CountingReadResultInterest interest = new CountingReadResultInterest();
      AccessSafely interestAccess = interest.afterCompleting(1);
      stateStore.read(firstData.id, AuthorData.class, interest);
      AuthorData item = interestAccess.readFrom("item", firstData.id);
      assertEquals(item.id, "1");
      assertNotNull(item.relatedAuthors);
    }


  private Projectable createAuthorRelated(AuthorState data) {
    final AuthorRelated eventData = new AuthorRelated(data.id, data.tags);
    BaseEntry.TextEntry textEntry = new BaseEntry.TextEntry(AuthorRelated.class, 1,
    JsonSerialization.serialized(eventData), 2, Metadata.withObject(eventData));
    final String projectionId = UUID.randomUUID().toString();
    valueToProjectionId.put(data.id, projectionId);
    return new TextProjectable(null, Collections.singletonList(textEntry), projectionId);
  }

    @Test
    public void addTags() {
        final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
        final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
      registerExampleAuthor(firstData.toAuthorState(), secondData.toAuthorState());

      final CountingProjectionControl control = new CountingProjectionControl();
      final AccessSafely access = control.afterCompleting(1);
      projection.projectWith(createAuthorRelated(firstData.toAuthorState()), control);
      final Map<String, Integer> confirmations = access.readFrom("confirmations");

      assertEquals(1, confirmations.size());
      assertEquals(1, valueOfProjectionIdFor(firstData.id, confirmations));

      CountingReadResultInterest interest = new CountingReadResultInterest();
      AccessSafely interestAccess = interest.afterCompleting(1);
      stateStore.read(firstData.id, AuthorData.class, interest);
      AuthorData item = interestAccess.readFrom("item", firstData.id);
      assertEquals(item.id, "1");
      assertNotNull(item.relatedAuthors);
    }


  private Projectable createAuthorRelated(AuthorState data) {
    final AuthorRelated eventData = new AuthorRelated(data.id, data.tags);
    BaseEntry.TextEntry textEntry = new BaseEntry.TextEntry(AuthorRelated.class, 1,
    JsonSerialization.serialized(eventData), 2, Metadata.withObject(eventData));
    final String projectionId = UUID.randomUUID().toString();
    valueToProjectionId.put(data.id, projectionId);
    return new TextProjectable(null, Collections.singletonList(textEntry), projectionId);
  }

    @Test
    public void replaceTags() {
        final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
        final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
      registerExampleAuthor(firstData.toAuthorState(), secondData.toAuthorState());

      final CountingProjectionControl control = new CountingProjectionControl();
      final AccessSafely access = control.afterCompleting(1);
      projection.projectWith(createAuthorRelated(firstData.toAuthorState()), control);
      final Map<String, Integer> confirmations = access.readFrom("confirmations");

      assertEquals(1, confirmations.size());
      assertEquals(1, valueOfProjectionIdFor(firstData.id, confirmations));

      CountingReadResultInterest interest = new CountingReadResultInterest();
      AccessSafely interestAccess = interest.afterCompleting(1);
      stateStore.read(firstData.id, AuthorData.class, interest);
      AuthorData item = interestAccess.readFrom("item", firstData.id);
      assertEquals(item.id, "1");
      assertNotNull(item.relatedAuthors);
    }


  private Projectable createAuthorUnrelated(AuthorState data) {
    final AuthorUnrelated eventData = new AuthorUnrelated(data.id, data.tags);
    BaseEntry.TextEntry textEntry = new BaseEntry.TextEntry(AuthorUnrelated.class, 1,
    JsonSerialization.serialized(eventData), 2, Metadata.withObject(eventData));
    final String projectionId = UUID.randomUUID().toString();
    valueToProjectionId.put(data.id, projectionId);
    return new TextProjectable(null, Collections.singletonList(textEntry), projectionId);
  }

    @Test
    public void removeTag() {
        final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
        final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
      registerExampleAuthor(firstData.toAuthorState(), secondData.toAuthorState());

      final CountingProjectionControl control = new CountingProjectionControl();
      final AccessSafely access = control.afterCompleting(1);
      projection.projectWith(createAuthorUnrelated(firstData.toAuthorState()), control);
      final Map<String, Integer> confirmations = access.readFrom("confirmations");

      assertEquals(1, confirmations.size());
      assertEquals(1, valueOfProjectionIdFor(firstData.id, confirmations));

      CountingReadResultInterest interest = new CountingReadResultInterest();
      AccessSafely interestAccess = interest.afterCompleting(1);
      stateStore.read(firstData.id, AuthorData.class, interest);
      AuthorData item = interestAccess.readFrom("item", firstData.id);
      assertEquals(item.id, "1");
      assertNotNull(item.relatedAuthors);
    }


  private Projectable createAuthorRelated(AuthorState data) {
    final AuthorRelated eventData = new AuthorRelated(data.id, data.relatedAuthors);
    BaseEntry.TextEntry textEntry = new BaseEntry.TextEntry(AuthorRelated.class, 1,
    JsonSerialization.serialized(eventData), 2, Metadata.withObject(eventData));
    final String projectionId = UUID.randomUUID().toString();
    valueToProjectionId.put(data.id, projectionId);
    return new TextProjectable(null, Collections.singletonList(textEntry), projectionId);
  }

    @Test
    public void relateAuthor() {
        final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
        final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
      registerExampleAuthor(firstData.toAuthorState(), secondData.toAuthorState());

      final CountingProjectionControl control = new CountingProjectionControl();
      final AccessSafely access = control.afterCompleting(1);
      projection.projectWith(createAuthorRelated(firstData.toAuthorState()), control);
      final Map<String, Integer> confirmations = access.readFrom("confirmations");

      assertEquals(1, confirmations.size());
      assertEquals(1, valueOfProjectionIdFor(firstData.id, confirmations));

      CountingReadResultInterest interest = new CountingReadResultInterest();
      AccessSafely interestAccess = interest.afterCompleting(1);
      stateStore.read(firstData.id, AuthorData.class, interest);
      AuthorData item = interestAccess.readFrom("item", firstData.id);
      assertEquals(item.id, "1");
      assertNotNull(item.relatedAuthors);
    }


  private Projectable createAuthorRelated(AuthorState data) {
    final AuthorRelated eventData = new AuthorRelated(data.id, data.relatedAuthors);
    BaseEntry.TextEntry textEntry = new BaseEntry.TextEntry(AuthorRelated.class, 1,
    JsonSerialization.serialized(eventData), 2, Metadata.withObject(eventData));
    final String projectionId = UUID.randomUUID().toString();
    valueToProjectionId.put(data.id, projectionId);
    return new TextProjectable(null, Collections.singletonList(textEntry), projectionId);
  }

    @Test
    public void relateAuthors() {
        final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
        final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
      registerExampleAuthor(firstData.toAuthorState(), secondData.toAuthorState());

      final CountingProjectionControl control = new CountingProjectionControl();
      final AccessSafely access = control.afterCompleting(1);
      projection.projectWith(createAuthorRelated(firstData.toAuthorState()), control);
      final Map<String, Integer> confirmations = access.readFrom("confirmations");

      assertEquals(1, confirmations.size());
      assertEquals(1, valueOfProjectionIdFor(firstData.id, confirmations));

      CountingReadResultInterest interest = new CountingReadResultInterest();
      AccessSafely interestAccess = interest.afterCompleting(1);
      stateStore.read(firstData.id, AuthorData.class, interest);
      AuthorData item = interestAccess.readFrom("item", firstData.id);
      assertEquals(item.id, "1");
      assertNotNull(item.relatedAuthors);
    }


  private Projectable createAuthorUnrelated(AuthorState data) {
    final AuthorUnrelated eventData = new AuthorUnrelated(data.id, data.relatedAuthors);
    BaseEntry.TextEntry textEntry = new BaseEntry.TextEntry(AuthorUnrelated.class, 1,
    JsonSerialization.serialized(eventData), 2, Metadata.withObject(eventData));
    final String projectionId = UUID.randomUUID().toString();
    valueToProjectionId.put(data.id, projectionId);
    return new TextProjectable(null, Collections.singletonList(textEntry), projectionId);
  }

    @Test
    public void unrelateAuthor() {
        final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
        final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
      registerExampleAuthor(firstData.toAuthorState(), secondData.toAuthorState());

      final CountingProjectionControl control = new CountingProjectionControl();
      final AccessSafely access = control.afterCompleting(1);
      projection.projectWith(createAuthorUnrelated(firstData.toAuthorState()), control);
      final Map<String, Integer> confirmations = access.readFrom("confirmations");

      assertEquals(1, confirmations.size());
      assertEquals(1, valueOfProjectionIdFor(firstData.id, confirmations));

      CountingReadResultInterest interest = new CountingReadResultInterest();
      AccessSafely interestAccess = interest.afterCompleting(1);
      stateStore.read(firstData.id, AuthorData.class, interest);
      AuthorData item = interestAccess.readFrom("item", firstData.id);
      assertEquals(item.id, "1");
      assertNotNull(item.relatedAuthors);
    }


  private Projectable createAuthorRelated(AuthorState data) {
    final AuthorRelated eventData = new AuthorRelated(data.id, data.relatedAuthors);
    BaseEntry.TextEntry textEntry = new BaseEntry.TextEntry(AuthorRelated.class, 1,
    JsonSerialization.serialized(eventData), 2, Metadata.withObject(eventData));
    final String projectionId = UUID.randomUUID().toString();
    valueToProjectionId.put(data.id, projectionId);
    return new TextProjectable(null, Collections.singletonList(textEntry), projectionId);
  }

    @Test
    public void replaceAllRelatedAuthors() {
        final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
        final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
      registerExampleAuthor(firstData.toAuthorState(), secondData.toAuthorState());

      final CountingProjectionControl control = new CountingProjectionControl();
      final AccessSafely access = control.afterCompleting(1);
      projection.projectWith(createAuthorRelated(firstData.toAuthorState()), control);
      final Map<String, Integer> confirmations = access.readFrom("confirmations");

      assertEquals(1, confirmations.size());
      assertEquals(1, valueOfProjectionIdFor(firstData.id, confirmations));

      CountingReadResultInterest interest = new CountingReadResultInterest();
      AccessSafely interestAccess = interest.afterCompleting(1);
      stateStore.read(firstData.id, AuthorData.class, interest);
      AuthorData item = interestAccess.readFrom("item", firstData.id);
      assertEquals(item.id, "1");
      assertNotNull(item.relatedAuthors);
    }

  private int valueOfProjectionIdFor(final String valueText, final Map<String, Integer> confirmations) {
    return confirmations.get(valueToProjectionId.get(valueText));
  }
}
