package io.vlingo.xoomapp.infrastructure.persistence;

import io.vlingo.xoom.actors.World;
import io.vlingo.xoom.actors.testkit.AccessSafely;
import io.vlingo.xoom.common.serialization.JsonSerialization;
import io.vlingo.xoom.lattice.model.projection.Projectable;
import io.vlingo.xoom.lattice.model.projection.Projection;
import io.vlingo.xoom.lattice.model.projection.TextProjectable;
import io.vlingo.xoom.lattice.model.stateful.StatefulTypeRegistry;
import io.vlingo.xoom.symbio.Metadata;
import io.vlingo.xoom.symbio.State.TextState;
import io.vlingo.xoom.symbio.store.dispatch.NoOpDispatcher;
import io.vlingo.xoom.symbio.store.state.StateStore;
import io.vlingo.xoom.symbio.store.state.inmemory.InMemoryStateStoreActor;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.time.LocalDate;
import io.vlingo.xoomapp.infrastructure.*;
import java.util.*;
import io.vlingo.xoomapp.model.author.*;

public class AuthorProjectionTest {
  private Projection projection;
  private StateStore store;
  private Map<String, String> valueToProjectionId;
  private World world;

  @BeforeEach
  public void setUp() {
    world = World.startWithDefaults("test-state-store-projection");
    store = world.actorFor(StateStore.class, InMemoryStateStoreActor.class, Arrays.asList(new NoOpDispatcher()));
    projection = world.actorFor(Projection.class, AuthorProjectionActor.class, store);
    StatefulTypeRegistry.registerAll(world, store, AuthorData.class);
    valueToProjectionId = new HashMap<>();
  }

  @Test
  public void withName() {
		final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
		final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
		final CountingProjectionControl control = new CountingProjectionControl();
    final AccessSafely access = control.afterCompleting(2);

    projection.projectWith(createAuthorRegistered(firstData, 1, "AuthorRegistered"), control);
    projection.projectWith(createAuthorRegistered(secondData, 1, "AuthorRegistered"), control);

    final Map<String,Integer> confirmations = access.readFrom("confirmations");

    assertEquals(2, confirmations.size());

    assertEquals(1, valueOfProjectionIdFor(firstData.id, confirmations));
    assertEquals(1, valueOfProjectionIdFor(secondData.id, confirmations));

		assertEquals(2, ((Map) access.readFrom("confirmations")).size());
  }

	@Test
	public void changeRank() {
    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
	  final CountingProjectionControl control = new CountingProjectionControl();

		final AccessSafely accessControl = control.afterCompleting(4);

	  projection.projectWith(createAuthorRegistered(firstData, 1, "AuthorRegistered"), control);
	  projection.projectWith(createAuthorRegistered(secondData, 1, "AuthorRegistered"), control);

	  projection.projectWith(createAuthorRanked(firstData, 2, "AuthorRanked"), control);
	  projection.projectWith(createAuthorRanked(secondData, 2, "AuthorRanked"), control);

		final Map<String,Integer> confirmations = accessControl.readFrom("confirmations");

		assertEquals(4, confirmations.size());

		assertEquals(1, valueOfProjectionIdFor(firstData.id, confirmations));
		assertEquals(1, valueOfProjectionIdFor(secondData.id, confirmations));

		assertEquals(4, ((Map) accessControl.readFrom("confirmations")).size());
	}

	@Test
	public void addTag() {
    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
	  final CountingProjectionControl control = new CountingProjectionControl();

		final AccessSafely accessControl = control.afterCompleting(4);

	  projection.projectWith(createAuthorRegistered(firstData, 1, "AuthorRegistered"), control);
	  projection.projectWith(createAuthorRegistered(secondData, 1, "AuthorRegistered"), control);

	  projection.projectWith(createAuthorTagged(firstData, 2, "AuthorTagged"), control);
	  projection.projectWith(createAuthorTagged(secondData, 2, "AuthorTagged"), control);

		final Map<String,Integer> confirmations = accessControl.readFrom("confirmations");

		assertEquals(4, confirmations.size());

		assertEquals(1, valueOfProjectionIdFor(firstData.id, confirmations));
		assertEquals(1, valueOfProjectionIdFor(secondData.id, confirmations));

		assertEquals(4, ((Map) accessControl.readFrom("confirmations")).size());
	}

	@Test
	public void addTags() {
    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
	  final CountingProjectionControl control = new CountingProjectionControl();

		final AccessSafely accessControl = control.afterCompleting(4);

	  projection.projectWith(createAuthorRegistered(firstData, 1, "AuthorRegistered"), control);
	  projection.projectWith(createAuthorRegistered(secondData, 1, "AuthorRegistered"), control);

	  projection.projectWith(createAuthorBulkTagged(firstData, 2, "AuthorBulkTagged"), control);
	  projection.projectWith(createAuthorBulkTagged(secondData, 2, "AuthorBulkTagged"), control);

		final Map<String,Integer> confirmations = accessControl.readFrom("confirmations");

		assertEquals(4, confirmations.size());

		assertEquals(1, valueOfProjectionIdFor(firstData.id, confirmations));
		assertEquals(1, valueOfProjectionIdFor(secondData.id, confirmations));

		assertEquals(4, ((Map) accessControl.readFrom("confirmations")).size());
	}

	@Test
	public void replaceTags() {
    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
	  final CountingProjectionControl control = new CountingProjectionControl();

		final AccessSafely accessControl = control.afterCompleting(4);

	  projection.projectWith(createAuthorRegistered(firstData, 1, "AuthorRegistered"), control);
	  projection.projectWith(createAuthorRegistered(secondData, 1, "AuthorRegistered"), control);

	  projection.projectWith(createAuthorTagsReplacedEvent(firstData, 2, "AuthorTagsReplacedEvent"), control);
	  projection.projectWith(createAuthorTagsReplacedEvent(secondData, 2, "AuthorTagsReplacedEvent"), control);

		final Map<String,Integer> confirmations = accessControl.readFrom("confirmations");

		assertEquals(4, confirmations.size());

		assertEquals(1, valueOfProjectionIdFor(firstData.id, confirmations));
		assertEquals(1, valueOfProjectionIdFor(secondData.id, confirmations));

		assertEquals(4, ((Map) accessControl.readFrom("confirmations")).size());
	}

	@Test
	public void removeTag() {
    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
	  final CountingProjectionControl control = new CountingProjectionControl();

		final AccessSafely accessControl = control.afterCompleting(4);

	  projection.projectWith(createAuthorRegistered(firstData, 1, "AuthorRegistered"), control);
	  projection.projectWith(createAuthorRegistered(secondData, 1, "AuthorRegistered"), control);

	  projection.projectWith(createAuthorUntagged(firstData, 2, "AuthorUntagged"), control);
	  projection.projectWith(createAuthorUntagged(secondData, 2, "AuthorUntagged"), control);

		final Map<String,Integer> confirmations = accessControl.readFrom("confirmations");

		assertEquals(4, confirmations.size());

		assertEquals(1, valueOfProjectionIdFor(firstData.id, confirmations));
		assertEquals(1, valueOfProjectionIdFor(secondData.id, confirmations));

		assertEquals(4, ((Map) accessControl.readFrom("confirmations")).size());
	}

	@Test
	public void relateAuthor() {
    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
	  final CountingProjectionControl control = new CountingProjectionControl();

		final AccessSafely accessControl = control.afterCompleting(4);

	  projection.projectWith(createAuthorRegistered(firstData, 1, "AuthorRegistered"), control);
	  projection.projectWith(createAuthorRegistered(secondData, 1, "AuthorRegistered"), control);

	  projection.projectWith(createAuthorRelated(firstData, 2, "AuthorRelated"), control);
	  projection.projectWith(createAuthorRelated(secondData, 2, "AuthorRelated"), control);

		final Map<String,Integer> confirmations = accessControl.readFrom("confirmations");

		assertEquals(4, confirmations.size());

		assertEquals(1, valueOfProjectionIdFor(firstData.id, confirmations));
		assertEquals(1, valueOfProjectionIdFor(secondData.id, confirmations));

		assertEquals(4, ((Map) accessControl.readFrom("confirmations")).size());
	}

	@Test
	public void relateAuthors() {
    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
	  final CountingProjectionControl control = new CountingProjectionControl();

		final AccessSafely accessControl = control.afterCompleting(4);

	  projection.projectWith(createAuthorRegistered(firstData, 1, "AuthorRegistered"), control);
	  projection.projectWith(createAuthorRegistered(secondData, 1, "AuthorRegistered"), control);

	  projection.projectWith(createAuthorsRelated(firstData, 2, "AuthorsRelated"), control);
	  projection.projectWith(createAuthorsRelated(secondData, 2, "AuthorsRelated"), control);

		final Map<String,Integer> confirmations = accessControl.readFrom("confirmations");

		assertEquals(4, confirmations.size());

		assertEquals(1, valueOfProjectionIdFor(firstData.id, confirmations));
		assertEquals(1, valueOfProjectionIdFor(secondData.id, confirmations));

		assertEquals(4, ((Map) accessControl.readFrom("confirmations")).size());
	}

	@Test
	public void unrelateAuthor() {
    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
	  final CountingProjectionControl control = new CountingProjectionControl();

		final AccessSafely accessControl = control.afterCompleting(4);

	  projection.projectWith(createAuthorRegistered(firstData, 1, "AuthorRegistered"), control);
	  projection.projectWith(createAuthorRegistered(secondData, 1, "AuthorRegistered"), control);

	  projection.projectWith(createAuthorUnrelated(firstData, 2, "AuthorUnrelated"), control);
	  projection.projectWith(createAuthorUnrelated(secondData, 2, "AuthorUnrelated"), control);

		final Map<String,Integer> confirmations = accessControl.readFrom("confirmations");

		assertEquals(4, confirmations.size());

		assertEquals(1, valueOfProjectionIdFor(firstData.id, confirmations));
		assertEquals(1, valueOfProjectionIdFor(secondData.id, confirmations));

		assertEquals(4, ((Map) accessControl.readFrom("confirmations")).size());
	}

	@Test
	public void replaceAllRelatedAuthors() {
    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
	  final CountingProjectionControl control = new CountingProjectionControl();

		final AccessSafely accessControl = control.afterCompleting(4);

	  projection.projectWith(createAuthorRegistered(firstData, 1, "AuthorRegistered"), control);
	  projection.projectWith(createAuthorRegistered(secondData, 1, "AuthorRegistered"), control);

	  projection.projectWith(createRelatedAuthorsReplacedEvent(firstData, 2, "RelatedAuthorsReplacedEvent"), control);
	  projection.projectWith(createRelatedAuthorsReplacedEvent(secondData, 2, "RelatedAuthorsReplacedEvent"), control);

		final Map<String,Integer> confirmations = accessControl.readFrom("confirmations");

		assertEquals(4, confirmations.size());

		assertEquals(1, valueOfProjectionIdFor(firstData.id, confirmations));
		assertEquals(1, valueOfProjectionIdFor(secondData.id, confirmations));

		assertEquals(4, ((Map) accessControl.readFrom("confirmations")).size());
	}

  @AfterEach
  public void tearDown() {
    world.terminate();
  }

  private int valueOfProjectionIdFor(final String valueText, final Map<String,Integer> confirmations) {
    return confirmations.get(valueToProjectionId.get(valueText));
  }

	private Projectable createAuthorRegistered(final AuthorData data, final int version, final String operation) {

		final TextState state = new TextState(data.id, AuthorState.class, 1, JsonSerialization.serialized(data.toAuthorState()), version,
		Metadata.with(data.toAuthorState(), data.id, operation));

		final String projectionId = UUID.randomUUID().toString();

		valueToProjectionId.put(data.id, projectionId);

		return new TextProjectable(state, Collections.emptyList(), projectionId);
	}

	private Projectable createAuthorRanked(final AuthorData data, final int version, final String operation) {

		final TextState state = new TextState(data.id, AuthorState.class, 1, JsonSerialization.serialized(data.toAuthorState()), version,
		Metadata.with(data.toAuthorState(), data.id, operation));

		final String projectionId = UUID.randomUUID().toString();

		valueToProjectionId.put(data.id, projectionId);

		return new TextProjectable(state, Collections.emptyList(), projectionId);
	}

	private Projectable createAuthorTagged(final AuthorData data, final int version, final String operation) {

		final TextState state = new TextState(data.id, AuthorState.class, 1, JsonSerialization.serialized(data.toAuthorState()), version,
		Metadata.with(data.toAuthorState(), data.id, operation));

		final String projectionId = UUID.randomUUID().toString();

		valueToProjectionId.put(data.id, projectionId);

		return new TextProjectable(state, Collections.emptyList(), projectionId);
	}

	private Projectable createAuthorBulkTagged(final AuthorData data, final int version, final String operation) {

		final TextState state = new TextState(data.id, AuthorState.class, 1, JsonSerialization.serialized(data.toAuthorState()), version,
		Metadata.with(data.toAuthorState(), data.id, operation));

		final String projectionId = UUID.randomUUID().toString();

		valueToProjectionId.put(data.id, projectionId);

		return new TextProjectable(state, Collections.emptyList(), projectionId);
	}

	private Projectable createAuthorTagsReplacedEvent(final AuthorData data, final int version, final String operation) {

		final TextState state = new TextState(data.id, AuthorState.class, 1, JsonSerialization.serialized(data.toAuthorState()), version,
		Metadata.with(data.toAuthorState(), data.id, operation));

		final String projectionId = UUID.randomUUID().toString();

		valueToProjectionId.put(data.id, projectionId);

		return new TextProjectable(state, Collections.emptyList(), projectionId);
	}

	private Projectable createAuthorUntagged(final AuthorData data, final int version, final String operation) {

		final TextState state = new TextState(data.id, AuthorState.class, 1, JsonSerialization.serialized(data.toAuthorState()), version,
		Metadata.with(data.toAuthorState(), data.id, operation));

		final String projectionId = UUID.randomUUID().toString();

		valueToProjectionId.put(data.id, projectionId);

		return new TextProjectable(state, Collections.emptyList(), projectionId);
	}

	private Projectable createAuthorRelated(final AuthorData data, final int version, final String operation) {

		final TextState state = new TextState(data.id, AuthorState.class, 1, JsonSerialization.serialized(data.toAuthorState()), version,
		Metadata.with(data.toAuthorState(), data.id, operation));

		final String projectionId = UUID.randomUUID().toString();

		valueToProjectionId.put(data.id, projectionId);

		return new TextProjectable(state, Collections.emptyList(), projectionId);
	}

	private Projectable createAuthorsRelated(final AuthorData data, final int version, final String operation) {

		final TextState state = new TextState(data.id, AuthorState.class, 1, JsonSerialization.serialized(data.toAuthorState()), version,
		Metadata.with(data.toAuthorState(), data.id, operation));

		final String projectionId = UUID.randomUUID().toString();

		valueToProjectionId.put(data.id, projectionId);

		return new TextProjectable(state, Collections.emptyList(), projectionId);
	}

	private Projectable createAuthorUnrelated(final AuthorData data, final int version, final String operation) {

		final TextState state = new TextState(data.id, AuthorState.class, 1, JsonSerialization.serialized(data.toAuthorState()), version,
		Metadata.with(data.toAuthorState(), data.id, operation));

		final String projectionId = UUID.randomUUID().toString();

		valueToProjectionId.put(data.id, projectionId);

		return new TextProjectable(state, Collections.emptyList(), projectionId);
	}

	private Projectable createRelatedAuthorsReplacedEvent(final AuthorData data, final int version, final String operation) {

		final TextState state = new TextState(data.id, AuthorState.class, 1, JsonSerialization.serialized(data.toAuthorState()), version,
		Metadata.with(data.toAuthorState(), data.id, operation));

		final String projectionId = UUID.randomUUID().toString();

		valueToProjectionId.put(data.id, projectionId);

		return new TextProjectable(state, Collections.emptyList(), projectionId);
	}
}
