package io.vlingo.infrastructure.persistence;

import java.util.Arrays;
import java.util.List;

import io.vlingo.xoomapp.model.author.AuthorEntity;
import io.vlingo.xoomapp.model.book.BookRented;
import io.vlingo.xoomapp.model.book.BookPurchased;
import io.vlingo.xoomapp.model.book.BookEntity;

import io.vlingo.xoom.actors.Definition;
import io.vlingo.xoom.actors.Stage;
import io.vlingo.xoom.lattice.model.sourcing.SourcedTypeRegistry;
import io.vlingo.xoom.lattice.model.sourcing.SourcedTypeRegistry.Info;
import io.vlingo.xoom.symbio.EntryAdapterProvider;
import io.vlingo.xoom.symbio.store.dispatch.Dispatcher;
import io.vlingo.xoom.symbio.store.dispatch.NoOpDispatcher;
import io.vlingo.xoom.symbio.store.dispatch.DispatcherControl;
import io.vlingo.xoom.symbio.store.dispatch.Dispatchable;
import io.vlingo.xoom.symbio.store.journal.Journal;
import io.vlingo.xoom.turbo.ComponentRegistry;
import io.vlingo.xoom.turbo.actors.Settings;
import io.vlingo.xoom.turbo.storage.Model;
import io.vlingo.xoom.turbo.storage.StoreActorBuilder;
import io.vlingo.xoom.turbo.annotation.persistence.Persistence.StorageType;

@SuppressWarnings("all")
public class CommandModelJournalProvider  {

  public final Journal<String> journal;

  public static CommandModelJournalProvider using(final Stage stage, final SourcedTypeRegistry registry) {
    return using(stage, registry, new NoOpDispatcher());
 }

  public static CommandModelJournalProvider using(final Stage stage, final SourcedTypeRegistry registry, final Dispatcher ...dispatchers) {
    if (ComponentRegistry.has(CommandModelJournalProvider.class)) {
      return ComponentRegistry.withType(CommandModelJournalProvider.class);
    }

    final EntryAdapterProvider entryAdapterProvider = EntryAdapterProvider.instance(stage.world());

    entryAdapterProvider.registerAdapter(BookRented.class, new BookRentedAdapter());
    entryAdapterProvider.registerAdapter(BookPurchased.class, new BookPurchasedAdapter());

    final Journal<String> journal =
              StoreActorBuilder.from(stage, Model.COMMAND, Arrays.asList(dispatchers), StorageType.JOURNAL, Settings.properties(), true);

    registry.register(new Info(journal, BookEntity.class, BookEntity.class.getSimpleName()));
    registry.register(new Info(journal, AuthorEntity.class, AuthorEntity.class.getSimpleName()));

    return new CommandModelJournalProvider(journal);
  }

  private CommandModelJournalProvider(final Journal<String> journal) {
    this.journal = journal;
    ComponentRegistry.register(getClass(), this);
  }

}
